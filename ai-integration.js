class AIIntegration {
    constructor() {
        this.apiKey = '';
        this.baseUrl = 'https://openrouter.ai/api/v1';
        this.models = {
            'blue': 'microsoft/mai-ds-r1:free',
            'yellow': 'microsoft/mai-ds-r1:free',
            'gray': 'microsoft/mai-ds-r1:free',
            'green': 'microsoft/mai-ds-r1:free'
        };
        this.requestQueue = [];
        this.isProcessing = false;
        this.activeRequestId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        this.requestCounter = 0; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    }

    setApiKey(apiKey) {
        this.apiKey = apiKey;
        localStorage.setItem('openrouter_api_key', apiKey);
    }

    getApiKey() {
        if (!this.apiKey) {
            this.apiKey = localStorage.getItem('openrouter_api_key') || '';
        }
        return this.apiKey;
    }

    async makeAIDecision(gameState, gameEngine, retryCount = 0, requestId = null) {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        const playerId = gameState.playerId;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!requestId) {
            requestId = `${playerId}-${++this.requestCounter}`;
            this.activeRequestId = requestId;
        }
        
        console.log(`üîç makeAIDecision called for playerId: ${playerId}, requestId: ${requestId}`);
        
        const model = this.models[playerId];
        
        if (!model) {
            throw new Error(`–ú–æ–¥–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        const prompt = this.generatePrompt(gameState);
        
        try {
            const response = await this.callOpenRouter(model, prompt);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            if (this.activeRequestId !== requestId) {
                console.log(`üö´ Ignoring stale response for ${playerId} (requestId: ${requestId}, active: ${this.activeRequestId})`);
                throw new Error(`Stale request: ${requestId} != ${this.activeRequestId}`);
            }
            
            // Check if response is empty or too short
            if (!response || response.trim().length < 10) {
                throw new Error('–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç AI');
            }
            
            const decision = this.parseAIResponse(response, gameState, requestId);
            
            // Check if we got a fallback decision and retry if so
            if (decision.reasoning === "–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI" && retryCount < 2) {
                console.log(`üîÑ Retry attempt ${retryCount + 1} for ${playerId}`);
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                return this.makeAIDecision(gameState, gameEngine, retryCount + 1, requestId);
            }
            
            return decision;
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            if (this.activeRequestId !== requestId) {
                console.log(`üö´ Ignoring stale error for ${playerId} (requestId: ${requestId}, active: ${this.activeRequestId})`);
                throw error; // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞
            }
            
            console.error(`‚ùå –û—à–∏–±–∫–∞ AI –¥–ª—è ${playerId} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error);
            
            // Retry up to 2 times
            if (retryCount < 2) {
                console.log(`üîÑ Retry attempt ${retryCount + 1} for ${playerId}`);
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                return this.makeAIDecision(gameState, gameEngine, retryCount + 1, requestId);
            }
            
            // Final fallback to random decision
            console.log(`üé≤ Final fallback for ${playerId} after ${retryCount + 1} attempts`);
            return this.generateRandomDecision(gameState);
        }
    }

    generatePrompt(gameState) {
        const { playerId, playerName, currentTurn, myUnits, canLie, board, players, diplomacyHistory } = gameState;
        
        // Create visible board representation
        let boardStr = "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –≤–∞–º –∫–ª–µ—Ç–∫–∏):\n";
        boardStr += "   0 1 2 3 4 5 6 7 8 9\n";
        
        for (let y = 0; y < 10; y++) {
            boardStr += y + " ";
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible) {
                    if (cell.units.length === 0) {
                        boardStr += " . ";
                    } else {
                        const unit = cell.units[0]; // Show first unit
                        const playerSymbol = {
                            'blue': '–°',
                            'yellow': '–ñ', 
                            'gray': '–†',
                            'green': '–ó'
                        }[unit.player] || '?';
                        boardStr += unit.count < 10 ? ` ${playerSymbol}${unit.count}` : `${playerSymbol}${unit.count}`;
                    }
                } else {
                    boardStr += " ? ";
                }
            }
            boardStr += "\n";
        }

        // Create my units positions
        let myUnitsStr = "–¢–í–û–ò –í–û–ô–°–ö–ê:\n";
        let foundMyUnits = [];
        
        for (let y = 0; y < 10; y++) {
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible && cell.units.length > 0) {
                    const myUnit = cell.units.find(u => u.player === playerId);
                    if (myUnit && myUnit.count > 0) {
                        foundMyUnits.push(`(${x},${y}): ${myUnit.count} –¥–∏–≤–∏–∑–∏–π`);
                        myUnitsStr += `- –ü–æ–∑–∏—Ü–∏—è (${x},${y}): ${myUnit.count} –¥–∏–≤–∏–∑–∏–π\n`;
                    }
                }
            }
        }
        
        if (foundMyUnits.length === 0) {
            myUnitsStr += "- –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞—à–∏ –≤–æ–π—Å–∫–∞!\n";
        }
        
        // Create players status
        let playersStr = "–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤:\n";
        players.forEach(p => {
            playersStr += `- ${p.name}: ${p.units} –¥–∏–≤–∏–∑–∏–π ${p.isAlive ? '(–∂–∏–≤)' : '(–º–µ—Ä—Ç–≤)'}\n`;
        });

        // Create diplomacy history
        let diplomacyStr = "";
        if (diplomacyHistory && diplomacyHistory.length > 0) {
            diplomacyStr = "\n–ò–°–¢–û–†–ò–Ø –î–ò–ü–õ–û–ú–ê–¢–ò–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π):\n";
            
            // Show last 10 messages
            const recentMessages = diplomacyHistory.slice(-10);
            recentMessages.forEach(msg => {
                const direction = msg.type === 'sent' ? '‚Üí' : '‚Üê';
                const otherPlayer = msg.type === 'sent' ? msg.to : msg.from;
                
                // Show fact-check results instead of claimed lies
                let lieIndicator = '';
                if (msg.actuallyLied) {
                    lieIndicator = ' [–õ–û–ñ–¨ –û–ë–ù–ê–†–£–ñ–ï–ù–ê]';
                } else if (msg.claimedLie && !msg.actuallyLied) {
                    lieIndicator = ' [–ó–ê–Ø–í–ò–õ –õ–û–ñ–¨, –ù–û –ì–û–í–û–†–ò–õ –ü–†–ê–í–î–£]';
                }
                
                diplomacyStr += `–•–æ–¥ ${msg.turn}: ${direction} ${otherPlayer}: "${msg.content}"${lieIndicator}\n`;
            });
        } else {
            diplomacyStr = "\n–ò–°–¢–û–†–ò–Ø –î–ò–ü–õ–û–ú–ê–¢–ò–ò: –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n";
        }

        const prompt = `–¢—ã –∏–≥—Ä–∞–µ—à—å –≤ –ø–æ—à–∞–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É –∫–∞–∫ ${playerName}.

–ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
- –ö–∞—Ä—Ç–∞ 10x10, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ 4 –∫–≤–∞–¥—Ä–∞–Ω—Ç–∞
- –ó–∞ —Ö–æ–¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã 1 –¥–∏–≤–∏–∑–∏—é –Ω–∞ 1 –∫–ª–µ—Ç–∫—É (–¢–û–õ–¨–ö–û –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –ù–ï –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏!)
- –î–æ–ø—É—Å—Ç–∏–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –≤–≤–µ—Ä—Ö (y-1), –≤–Ω–∏–∑ (y+1), –≤–ª–µ–≤–æ (x-1), –≤–ø—Ä–∞–≤–æ (x+1)
- –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –û–î–ù–û –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–º—É –∏–∑ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ–≥–æ –Ω–µ —É–≤–∏–¥—è—Ç)
- –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –≤—Ä–∞–≥–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–æ–π (—Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–≤–∏–∑–∏–π)
- –í–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –∫–ª–µ—Ç–∫–∏ —Ä—è–¥–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –≤–æ–π—Å–∫–∞–º–∏ (—Ç—É–º–∞–Ω –≤–æ–π–Ω—ã)
- –ú–æ–∂–µ—à—å —Å–æ–ª–≥–∞—Ç—å, –Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ 10 —Ö–æ–¥–æ–≤

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
- –•–æ–¥: ${currentTurn}
- –¢–≤–æ–∏ –¥–∏–≤–∏–∑–∏–∏: ${myUnits}
- –ú–æ–∂–µ—à—å —Å–æ–ª–≥–∞—Ç—å: ${canLie ? '–î–∞' : '–ù–µ—Ç'}

${myUnitsStr}

${boardStr}

${playersStr}

${diplomacyStr}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –í–æ—Ç –ø—Ä–∏–º–µ—Ä:

\`\`\`json
{
  "moves": [
    {
      "fromX": 0,
      "fromY": 0, 
      "toX": 1,
      "toY": 0,
      "unitCount": 3
    }
  ],
  "diplomacy": {
    "to": "gray",
    "content": "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ—é–∑ –ø—Ä–æ—Ç–∏–≤ –°–∏–Ω–µ–≥–æ!",
    "isLie": false
  },
  "reasoning": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
}
\`\`\`

–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã fromX/fromY –∏–∑ —Å–µ–∫—Ü–∏–∏ "–¢–í–û–ò –í–û–ô–°–ö–ê"!

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í moves –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–æ–¥
- –í diplomacy –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–º—É –∏–≥—Ä–æ–∫—É (blue/yellow/gray/green) –∏–ª–∏ null
- –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è diplomacy.to: "blue", "yellow", "gray", "green" –∏–ª–∏ null
- –ë—É–¥—å —É–º–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–æ–º: –∏—Å–ø–æ–ª—å–∑—É–π –¥–∏–ø–ª–æ–º–∞—Ç–∏—é, –ª–æ–∂—å (–µ—Å–ª–∏ –º–æ–∂–µ—à—å), —Ä–∞–∑–≤–µ–¥–∫—É

–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û JSON –í –£–ö–ê–ó–ê–ù–ù–û–ú –§–û–†–ú–ê–¢–ï!`;

        return prompt;
    }

    async callOpenRouter(model, prompt) {
        console.log(`üåê Calling OpenRouter for model: ${model}`);
        const response = await fetch(`${this.baseUrl}/chat/completions`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${this.getApiKey()}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': window.location.origin,
                'X-Title': 'AI Strategic Battle'
            },
            body: JSON.stringify({
                model: model,
                messages: [
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: 0.3,  // Lower temperature for more consistent responses
                max_tokens: 1500,  // More tokens to ensure complete responses
                top_p: 0.9
            })
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(`OpenRouter API error: ${response.status} - ${error}`);
        }

        const data = await response.json();
        return data.choices[0].message.content;
    }

    parseAIResponse(response, gameState, requestId = 'unknown') {
        console.log(`ü§ñ AI Raw Response for ${gameState.playerId} (requestId: ${requestId}):`, response);
        
        try {
            // Try multiple JSON extraction methods
            let jsonStr = null;
            
            // Method 1: Look for JSON block with code markers
            const codeBlockMatch = response.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/i);
            if (codeBlockMatch) {
                jsonStr = codeBlockMatch[1];
                console.log('üì¶ Found JSON in code block:', jsonStr);
            } else {
                // Method 2: Find the first complete JSON object
                const jsonMatch = response.match(/\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/);
                if (jsonMatch) {
                    jsonStr = jsonMatch[0];
                    console.log('üì¶ Found JSON object:', jsonStr);
                } else {
                    // Method 3: Try to find any curly braces content
                    const fallbackMatch = response.match(/\{[\s\S]*\}/);
                    if (fallbackMatch) {
                        jsonStr = fallbackMatch[0];
                        console.log('üì¶ Found fallback JSON:', jsonStr);
                    }
                }
            }
            
            if (!jsonStr) {
                throw new Error('No JSON found in response');
            }

            let decision = JSON.parse(jsonStr);
            console.log('‚úÖ Parsed decision:', decision);
            
            // Fix common AI mistakes
            if (decision.diplom–∞cy && !decision.diplomacy) {
                // Fix Cyrillic '–∞' instead of Latin 'a' in diplomacy
                decision.diplomacy = decision.diplom–∞cy;
                delete decision.diplom–∞cy;
                console.log('üîß Fixed diplom–∞cy -> diplomacy');
            }
            
            if (decision.dipl–æ–º–∞—Ç–∏—è && !decision.diplomacy) {
                // Fix Russian word "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è"
                decision.diplomacy = decision.dipl–æ–º–∞—Ç–∏—è;
                delete decision.dipl–æ–º–∞—Ç–∏—è;
                console.log('üîß Fixed dipl–æ–º–∞—Ç–∏—è -> diplomacy');
            }
            
            // Validate decision structure
            if (!decision.moves || !Array.isArray(decision.moves) || decision.moves.length === 0) {
                throw new Error('Invalid moves in AI response');
            }

            // Validate moves
            decision.moves.forEach(move => {
                if (typeof move.fromX !== 'number' || typeof move.fromY !== 'number' ||
                    typeof move.toX !== 'number' || typeof move.toY !== 'number' ||
                    typeof move.unitCount !== 'number') {
                    throw new Error('Invalid move format');
                }
            });

            // Validate diplomacy if present
            if (decision.diplomacy && decision.diplomacy !== null) {
                if (typeof decision.diplomacy.to !== 'string' || 
                    typeof decision.diplomacy.content !== 'string') {
                    decision.diplomacy = null;
                }
            }

            console.log('‚úÖ Valid decision for', gameState.playerId, decision);
            return decision;
        } catch (error) {
            console.error(`‚ùå Error parsing AI response for ${gameState.playerId}:`, error);
            console.log('üîç Raw response was:', response);
            
            // Return fallback decision
            console.log('üé≤ Using fallback random decision');
            return this.generateRandomDecision(gameState);
        }
    }

    generateRandomDecision(gameState) {
        const { board, playerId } = gameState;
        const moves = [];
        
        // Find player's units
        for (let y = 0; y < 10; y++) {
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible && cell.units.length > 0) {
                    const playerUnit = cell.units.find(u => u.player === playerId);
                    if (playerUnit && playerUnit.count > 0) {
                        // Try to make a random valid move
                        const directions = [
                            { dx: 0, dy: -1 }, { dx: 1, dy: 0 },
                            { dx: 0, dy: 1 }, { dx: -1, dy: 0 }
                        ];
                        
                        for (const dir of directions) {
                            const newX = x + dir.dx;
                            const newY = y + dir.dy;
                            
                            if (newX >= 0 && newX < 10 && newY >= 0 && newY < 10) {
                                moves.push({
                                    fromX: x,
                                    fromY: y,
                                    toX: newX,
                                    toY: newY,
                                    unitCount: Math.min(1, playerUnit.count)
                                });
                                break;
                            }
                        }
                        
                        if (moves.length > 0) break;
                    }
                }
            }
            if (moves.length > 0) break;
        }
        
        // If no valid moves found, this is a problem
        if (moves.length === 0) {
            console.error('No valid moves found for fallback decision');
            // Return a default move (this shouldn't happen in normal gameplay)
            moves.push({
                fromX: 0, fromY: 0, toX: 1, toY: 0, unitCount: 1
            });
        }
        
        return {
            moves: moves,
            diplomacy: null,
            reasoning: "–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI"
        };
    }

    // Queue system for AI requests to avoid rate limits
    async queueRequest(gameState, gameEngine) {
        // Clear queue if it's a different player to avoid conflicts
        const currentPlayerId = gameState.playerId;
        if (this.requestQueue.length > 0) {
            const queuedPlayerId = this.requestQueue[0].gameState.playerId;
            if (queuedPlayerId !== currentPlayerId) {
                console.log(`üßπ Clearing queue: switching from ${queuedPlayerId} to ${currentPlayerId}`);
                // Reject all pending requests from different player
                this.requestQueue.forEach(request => {
                    request.reject(new Error(`Request cancelled: player switch from ${queuedPlayerId} to ${currentPlayerId}`));
                });
                this.requestQueue = [];
                this.isProcessing = false;
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                this.activeRequestId = null;
            }
        }
        
        return new Promise((resolve, reject) => {
            this.requestQueue.push({
                gameState,
                gameEngine,
                resolve,
                reject
            });
            
            if (!this.isProcessing) {
                this.processQueue();
            }
        });
    }

    async processQueue() {
        if (this.requestQueue.length === 0) {
            this.isProcessing = false;
            return;
        }
        
        this.isProcessing = true;
        const request = this.requestQueue.shift();
        
        console.log(`üè≠ Processing queue request for player: ${request.gameState.playerId}`);
        
        try {
            const decision = await this.makeAIDecision(request.gameState, request.gameEngine);
            request.resolve(decision);
        } catch (error) {
            request.reject(error);
        }
        
        // Add delay between requests to respect rate limits
        setTimeout(() => {
            this.processQueue();
        }, 1000); // 1 second delay
    }

    // Test API connection
    async testConnection() {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        try {
            const response = await fetch(`${this.baseUrl}/models`, {
                headers: {
                    'Authorization': `Bearer ${this.getApiKey()}`
                }
            });

            if (!response.ok) {
                throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
            }

            return true;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${error.message}`);
        }
    }

    // Get model status
    async getModelStatus() {
        const modelStatus = {};
        
        for (const [playerId, modelName] of Object.entries(this.models)) {
            try {
                const response = await fetch(`${this.baseUrl}/models/${modelName}`, {
                    headers: {
                        'Authorization': `Bearer ${this.getApiKey()}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    modelStatus[playerId] = {
                        available: true,
                        model: modelName,
                        info: data
                    };
                } else {
                    modelStatus[playerId] = {
                        available: false,
                        model: modelName,
                        error: `HTTP ${response.status}`
                    };
                }
            } catch (error) {
                modelStatus[playerId] = {
                    available: false,
                    model: modelName,
                    error: error.message
                };
            }
        }
        
        return modelStatus;
    }
}