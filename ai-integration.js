class AIIntegration {
    constructor() {
        this.apiKey = '';
        this.baseUrl = 'https://openrouter.ai/api/v1';
        this.models = {
            'blue': 'google/gemini-2.0-flash-001', //'google/gemma-3-27b-it:free',
            'yellow': 'meta-llama/llama-4-scout', //'meta-llama/llama-3.3-70b-instruct:free',
            'gray': 'mistralai/mistral-nemo', //'mistralai/mistral-small-3.2-24b-instruct:free',
            'green': 'qwen/qwen3-30b-a3b', //'qwen/qwen-2.5-72b-instruct:free'
        };
        
        // Commentator model - sees everything and provides colorful commentary
        this.commentatorModel = 'google/gemini-2.0-flash-001'; // Good for analysis and commentary
        this.requestQueue = [];
        this.isProcessing = false;
        this.activeRequestId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        this.requestCounter = 0; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    }

    setApiKey(apiKey) {
        this.apiKey = apiKey;
        localStorage.setItem('openrouter_api_key', apiKey);
    }

    getApiKey() {
        if (!this.apiKey) {
            this.apiKey = localStorage.getItem('openrouter_api_key') || '';
        }
        return this.apiKey;
    }

    async makeAIDecision(gameState, gameEngine, retryCount = 0, requestId = null) {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        const playerId = gameState.playerId;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!requestId) {
            requestId = `${playerId}-${++this.requestCounter}`;
            this.activeRequestId = requestId;
        }
        
        const model = this.models[playerId];
        
        if (!model) {
            throw new Error(`–ú–æ–¥–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        const { systemPrompt, userPrompt } = this.generatePrompt({
            ...gameState,
            playerId,
            playerName: this.getPlayerName(playerId)
        });
        
        try {
            const response = await this.callOpenRouter(model, systemPrompt, userPrompt);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            if (this.activeRequestId !== requestId) {
                throw new Error(`Stale request: ${requestId} != ${this.activeRequestId}`);
            }
            
            // Check if response is empty or too short
            if (!response || response.trim().length < 10) {
                throw new Error('–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç AI');
            }
            
            const decision = this.parseAIResponse(response, gameState, requestId);
            
            // Check if we got a fallback decision and retry if so
            if (decision.reasoning === "–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI" && retryCount < 2) {
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                return this.makeAIDecision(gameState, gameEngine, retryCount + 1, requestId);
            }
            
            return decision;
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            if (this.activeRequestId !== requestId) {
                throw error; // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞
            }
            
            console.error(`‚ùå –û—à–∏–±–∫–∞ AI –¥–ª—è ${playerId} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error.message);
            
            // Retry up to 2 times
            if (retryCount < 2) {
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                return this.makeAIDecision(gameState, gameEngine, retryCount + 1, requestId);
            }
            
            // Final fallback to random decision
            return this.generateRandomDecision(gameState);
        }
    }

    getPlayerName(playerId) {
        const names = {
            'blue': '–°–∏–Ω–∏–π',
            'yellow': '–ñ–µ–ª—Ç—ã–π',
            'green': '–ó–µ–ª–µ–Ω—ã–π',
            'gray': '–°–µ—Ä—ã–π'
        };
        return names[playerId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }

    isHomeBase(x, y, playerId) {
        const homePositions = {
            'blue': { x: 0, y: 0 },
            'yellow': { x: 9, y: 0 },
            'green': { x: 9, y: 9 },
            'gray': { x: 0, y: 9 }
        };
        
        const home = homePositions[playerId];
        return home && x === home.x && y === home.y;
    }

    generatePrompt(gameState) {
        const { playerId, playerName, currentTurn, board, players, diplomacyHistory } = gameState;
        
        // Create visible board representation
        let boardStr = "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã (–≤–∏–¥–∏–º—ã–µ –≤–∞–º –∫–ª–µ—Ç–∫–∏ + —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã):\n";
        boardStr += "   0 1 2 3 4 5 6 7 8 9\n";
        boardStr += "üè∞ –ë–ê–ó–´: üîµ(0,0) üü°(9,0) üü¢(9,9) ‚ö™(0,9) - –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ø–æ–º–µ—á–µ–Ω—ã üö´\n";
        
        for (let y = 0; y < 10; y++) {
            boardStr += y + " ";
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible) {
                    if (cell.units.length === 0) {
                        // Check if this is a central resource cell
                        if (cell.resourceCell) {
                            if (cell.depleted) {
                                boardStr += "üèúÔ∏è "; // Depleted resource
                            } else {
                                boardStr += "üí∞ "; // Available resource
                            }
                        } else {
                            // Check if this is a captured enemy base
                            if (cell.baseCapture) {
                                boardStr += "üö´ "; // Captured base
                            } else {
                                boardStr += " . ";
                            }
                        }
                    } else {
                        const unit = cell.units[0]; // Show first unit
                        const playerSymbol = {
                            'blue': '–°',
                            'yellow': '–ñ', 
                            'gray': '–†',
                            'green': '–ó'
                        }[unit.player] || '?';
                        boardStr += unit.count < 10 ? ` ${playerSymbol}${unit.count}` : `${playerSymbol}${unit.count}`;
                    }
                } else {
                    // Check if this is a central resource cell (always visible)
                    if (cell.resourceCell) {
                        if (cell.depleted) {
                            boardStr += "üèúÔ∏è "; // Depleted resource
                        } else {
                            boardStr += "üí∞ "; // Available resource
                        }
                    } else {
                        boardStr += " ? ";
                    }
                }
            }
            boardStr += "\n";
        }

        // Create my units positions
        let myUnitsStr = "–¢–í–û–ò –í–û–ô–°–ö–ê:\n";
        let foundMyUnits = [];
        
        for (let y = 0; y < 10; y++) {
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible && cell.units.length > 0) {
                    const myUnit = cell.units.find(u => u.player === playerId);
                    if (myUnit && myUnit.count > 0) {
                        foundMyUnits.push(`(${x},${y}): ${myUnit.count} –¥–∏–≤–∏–∑–∏–π`);
                        // Highlight home base units (they might be bonus units)
                        const isHomeBase = this.isHomeBase(x, y, playerId);
                        const homeBaseMarker = isHomeBase ? " üè†" : "";
                        myUnitsStr += `- –ü–æ–∑–∏—Ü–∏—è (${x},${y}): ${myUnit.count} –¥–∏–≤–∏–∑–∏–π${homeBaseMarker}\n`;
                    }
                }
            }
        }
        
        if (foundMyUnits.length === 0) {
            myUnitsStr += "- –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞—à–∏ –≤–æ–π—Å–∫–∞!\n";
        }
        
        // Create players status
        let playersStr = "–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤:\n";
        players.forEach(p => {
            playersStr += `- ${p.name}: ${p.units} –¥–∏–≤–∏–∑–∏–π ${p.isAlive ? '(–∂–∏–≤)' : '(–º–µ—Ä—Ç–≤)'}\n`;
        });

        // Create central resources status (always visible to all players)
        let resourcesStr = "\nüí∞ –°–¢–ê–¢–£–° –¶–ï–ù–¢–†–ê–õ–¨–ù–´–• –†–ï–°–£–†–°–û–í:\n";
        const centralCells = [
            { x: 4, y: 4 }, { x: 4, y: 5 },
            { x: 5, y: 4 }, { x: 5, y: 5 }
        ];
        
        centralCells.forEach(({ x, y }) => {
            const cell = board[y][x];
            
            if (cell.resourceCell) {
                if (cell.depleted) {
                    resourcesStr += `- –ö–ª–µ—Ç–∫–∞ (${x},${y}): üèúÔ∏è –†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω\n`;
                } else {
                    resourcesStr += `- –ö–ª–µ—Ç–∫–∞ (${x},${y}): üí∞ –†–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω (+1 –¥–∏–≤–∏–∑–∏—è)\n`;
                }
            }
        });

        // Create diplomacy history
        let diplomacyStr = "";
        if (diplomacyHistory && diplomacyHistory.length > 0) {
            diplomacyStr = "\n‚ö†Ô∏è –ò–°–¢–û–†–ò–Ø –î–ò–ü–õ–û–ú–ê–¢–ò–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–ß–¢–ò –ò –û–¢–†–ï–ê–ì–ò–†–£–ô:\n";
            diplomacyStr += "üíÄ –ü–û–ú–ù–ò: –î–∏–ø–ª–æ–º–∞—Ç–∏—è - —ç—Ç–æ —Ç–æ–∂–µ –æ—Ä—É–∂–∏–µ!\n";
            
            // Show last 10 messages
            const recentMessages = diplomacyHistory.slice(-10);
            recentMessages.forEach(msg => {
                const direction = msg.type === 'sent' ? '‚Üí' : '‚¨ÖÔ∏è';
                const otherPlayer = msg.type === 'sent' ? msg.to : msg.from;
                
                // Make incoming messages more visible
                const prefix = msg.type === 'received' ? 'üîî –í–•–û–î–Ø–©–ï–ï: ' : '';
                
                diplomacyStr += `${prefix}–•–æ–¥ ${msg.turn}: ${direction} ${otherPlayer}: "${msg.content}"\n`;
            });
        } else {
            diplomacyStr = "\nüì≠ –ò–°–¢–û–†–ò–Ø –î–ò–ü–õ–û–ú–ê–¢–ò–ò: –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n";
            diplomacyStr += "üíÄ –ù–ê–ß–ò–ù–ê–ô –ò–ì–†–£: –ò—Å–ø–æ–ª—å–∑—É–π –¥–∏–ø–ª–æ–º–∞—Ç–∏—é –¥–ª—è —Å–≤–æ–µ–π –ø–æ–±–µ–¥—ã!\n";
        }

        // System message with game rules and format requirements
        const systemPrompt = `–¢—ã –∏–≥—Ä–∞–µ—à—å –≤ –ø–æ—à–∞–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É –∫–∞–∫ ${playerName}.

üéØ –¶–ï–õ–¨ –ò–ì–†–´
–£–ù–ò–ß–¢–û–ñ–ò–¢–¨ –í–°–ï–• –°–û–ü–ï–†–ù–ò–ö–û–í! –û—Å—Ç–∞—Ç—å—Å—è –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ - –¢–´!

üó∫Ô∏è –ö–ê–†–¢–ê –ò –ó–û–ù–´
–ö–∞—Ä—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º 10x10 –∫–ª–µ—Ç–æ–∫.
–†–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ 4 –∫–≤–∞–¥—Ä–∞–Ω—Ç–∞:
üîµ –°–∏–Ω–∏–π (–°): –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (0,0)-(4,4). –ë–∞–∑–∞: (0,0)
üü° –ñ–µ–ª—Ç—ã–π (–ñ): –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (5,0)-(9,4). –ë–∞–∑–∞: (9,0)
üü¢ –ó–µ–ª–µ–Ω—ã–π (–ó): –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (5,5)-(9,9). –ë–∞–∑–∞: (9,9)
‚ö™ –°–µ—Ä—ã–π (–†): –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (0,5)-(4,9). –ë–∞–∑–∞: (0,9)

–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ï –†–ï–°–£–†–°–´: –ö–ª–µ—Ç–∫–∏ (4,4), (4,5), (5,4), (5,5). –ö–∞–∂–¥–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å (+1 –¥–∏–≤–∏–∑–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–≤–∞—Ç–µ).

‚öîÔ∏è –ú–ï–•–ê–ù–ò–ö–ê –ò–ì–†–´
–ù–ê–ß–ê–õ–û:
–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 10 –¥–∏–≤–∏–∑–∏–π, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –µ–≥–æ –±–∞–∑–æ–≤–æ–π –∫–ª–µ—Ç–∫–µ (üîµ(0,0), üü°(9,0), üü¢(9,9), ‚ö™(0,9)).
–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤: üîµ –°–∏–Ω–∏–π ‚Üí üü° –ñ–µ–ª—Ç—ã–π ‚Üí üü¢ –ó–µ–ª–µ–Ω—ã–π ‚Üí ‚ö™ –°–µ—Ä—ã–π.

–•–û–î –ò–ì–†–û–ö–ê (–î–µ–π—Å—Ç–≤–∏—è):

–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –í–û–ô–°–ö:
–ö–∞–∂–¥–∞—è –¥–∏–≤–∏–∑–∏—è –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–¥–∏–∞–≥–æ–Ω–∞–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω–∞).
–î–≤–∏–∂–µ–Ω–∏–µ –ù–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ‚Äì –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –¥–ª—è –¥–∏–≤–∏–∑–∏–∏ –∏–ª–∏ –≤—Å–µ—Ö.
–ú–æ–∂–Ω–æ –î–†–û–ë–ò–¢–¨ –≤–æ–π—Å–∫–∞: –° –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–≤–∏–∂–µ–Ω–∏–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–≤–∏–∑–∏–π (–æ—Ç 1 –¥–æ –≤—Å–µ—Ö) –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏. –ö–∞–∂–¥–∞—è –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.

–í–•–û–î –ù–ê –ö–õ–ï–¢–ö–£:
–ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞: –î–∏–≤–∏–∑–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –∫–ª–µ—Ç–∫—É. –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ–º –≤–æ–π—Å–∫.
–ö–ª–µ—Ç–∫–∞ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º: –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ë–û–ô.
–†–µ—Å—É—Ä—Å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ (4,4;4,5;5,4;5,5): –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –ª—é–±–æ–π —Å–≤–æ–µ–π –¥–∏–≤–∏–∑–∏–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å +1 –¥–∏–≤–∏–∑–∏—è (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –µ–≥–æ –¥–æ–º–∞—à–Ω–µ–π –±–∞–∑–µ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –µ–≥–æ —Ö–æ–¥–∞). –†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø—ã–≤–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.
–ë–∞–∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (üîµ(0,0), üü°(9,0), üü¢(9,9), ‚ö™(0,9)): –ü—Ä–∏ –≤—Ö–æ–¥–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å–≤–æ–µ–π –¥–∏–≤–∏–∑–∏–∏ –Ω–∞ –±–∞–∑—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å +10 –¥–∏–≤–∏–∑–∏–π (–ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –µ–≥–æ –¥–æ–º–∞—à–Ω–µ–π –±–∞–∑–µ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –µ–≥–æ —Ö–æ–¥–∞). **–í–ê–ñ–ù–û: –ö–∞–∂–¥–∞—è –±–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ö–≤–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑!** –ï—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ (–ø–æ–º–µ—á–µ–Ω–∞ üö´), –±–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ –±–∞–∑–∞ –∑–∞—â–∏—â–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–æ–π. –ë–æ–Ω—É—Å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –±–æ—è, –æ—Å—Ç–∞–≤—à–∏–π—Å—è –Ω–∞ –∫–ª–µ—Ç–∫–µ –±–∞–∑—ã.

‚öî –ë–û–ï–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê:
–ë–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–∏–≤–∏–∑–∏–∏(–π) –Ω–∞ –∫–ª–µ—Ç–∫—É, –∑–∞–Ω—è—Ç—É—é –≤–æ–π—Å–∫–∞–º–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
–ê—Ç–∞–∫—É—é—â–∏–π: –ò–≥—Ä–æ–∫, —á—å—è –¥–∏–≤–∏–∑–∏—è –≤—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–µ—Ç–∫—É.
–ó–∞—â–∏—Ç–Ω–∏–∫: –ò–≥—Ä–æ–∫, —á—å–∏ –¥–∏–≤–∏–∑–∏–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –Ω–∞ –∫–ª–µ—Ç–∫–µ.
–ò—Å—Ö–æ–¥ –±–æ—è:
–ü–æ–±–µ–¥–∞ –ê—Ç–∞–∫—É—é—â–µ–≥–æ: –°–∏–ª—ã –ê—Ç–∞–∫—É—é—â–µ–≥–æ - –°–∏–ª—ã –ó–∞—â–∏—Ç–Ω–∏–∫–∞ = –û—Å—Ç–∞—Ç–æ–∫ –ê—Ç–∞–∫—É—é—â–µ–≥–æ. –ó–∞—â–∏—Ç–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ. –ê—Ç–∞–∫—É—é—â–∏–π –∑–∞–Ω–∏–º–∞–µ—Ç –∫–ª–µ—Ç–∫—É —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –¥–∏–≤–∏–∑–∏—è–º–∏.
–†–∞–≤–Ω—ã–µ –°–∏–ª—ã (X vs X): –í—Å–µ –¥–∏–≤–∏–∑–∏–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ (–æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω) —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç—Å—è. –ö–ª–µ—Ç–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—É—Å—Ç–æ–π.
–ü—Ä–∏–º–µ—Ä (–ê—Ç–∞–∫—É—é—â–∏–π 5 vs –ó–∞—â–∏—Ç–Ω–∏–∫ 3): –ê—Ç–∞–∫—É—é—â–∏–π –ø–æ–±–µ–∂–¥–∞–µ—Ç, —Ç–µ—Ä—è–µ—Ç 3 –¥–∏–≤–∏–∑–∏–∏. –ù–∞ –∫–ª–µ—Ç–∫–µ –æ—Å—Ç–∞—é—Ç—Å—è 2 –¥–∏–≤–∏–∑–∏–∏ –ê—Ç–∞–∫—É—é—â–µ–≥–æ. –ó–∞—â–∏—Ç–Ω–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω.

üëÅÔ∏è‚Äçüó®Ô∏è –¢–£–ú–ê–ù –í–û–ô–ù–´:
–ò–≥—Ä–æ–∫ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–ª–µ—Ç–∫–∏, –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Å–µ–¥–Ω–∏–µ (–≤ —Ä–∞–¥–∏—É—Å–µ 1 –∫–ª–µ—Ç–∫–∏) —Å –∫–ª–µ—Ç–∫–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ—è—Ç –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–≤–∏–∑–∏–∏.
–í–∏–¥–∏–º–æ—Å—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω–∞: –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞. –ï—Å–ª–∏ –≤—Ä–∞–∂–µ—Å–∫–∞—è –¥–∏–≤–∏–∑–∏—è —É—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏, –∫–ª–µ—Ç–∫–∞ —Å–Ω–æ–≤–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç—É–º–∞–Ω–æ–º.

‚úâÔ∏è –î–ò–ü–õ–û–ú–ê–¢–ò–Ø:
–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–∞–∑–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º (–Ω–µ–ª—å–∑—è 2 –æ–¥–Ω–æ–º—É).
–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: –ù–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —É—Å–ª–æ–≤–∏—è, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã, –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç.–¥.).
–î–æ—Å—Ç–∞–≤–∫–∞: –°–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∏ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –µ–≥–æ —Ö–æ–¥–∞.

‚ò†Ô∏è –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –ò–ì–†–û–ö–ê
–ò–≥—Ä–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–º –∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã, –µ—Å–ª–∏:
–£ –Ω–µ–≥–æ 0 –¥–∏–≤–∏–∑–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ. (–ì–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤):
–û–Ω –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
–û—Ç –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ö–æ–¥–æ–≤.
–ü–æ —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–º (–∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ) –µ–≥–æ —Å–∏–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≥—Ä–æ–º–ª–µ–Ω—ã.

üèÅ –ö–û–ù–ï–¶ –ò–ì–†–´ –ò –ü–û–ë–ï–î–ê
–ü–û–ë–ï–î–ê: –û—Å—Ç–∞—Ç—å—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º —Å –¥–∏–≤–∏–∑–∏—è–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ.
–ù–ò–ß–¨–Ø: –ï—Å–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 2 –∏–≥—Ä–æ–∫–∞ –∏ —É –Ω–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–≤–∏–∑–∏–π.
–ü–û–ë–ï–î–ê –ü–†–ò 2-–• –ò–ì–†–û–ö–ê–•: –ï—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –¥–∏–≤–∏–∑–∏–π, –æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç.

üìå –ö–õ–Æ–ß–ï–í–´–ï –£–°–õ–û–í–ò–Ø
–ù–æ–≤—ã—Ö –¥–∏–≤–∏–∑–∏–π (–∫—Ä–æ–º–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Å—É—Ä—Å—ã –∏ –±–∞–∑—ã) –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è.
–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–ª–µ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ–º –Ω–∞ –Ω–µ–π –≤–æ–π—Å–∫. –ó–∞—Ö–≤–∞—Ç –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ.
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–≤–∏–∑–∏–π: –ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ (–∫—Ä–æ–º–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö 10 –∏ –±–æ–Ω—É—Å–æ–≤: +1 –∑–∞ —Ä–µ—Å—É—Ä—Å, +10 –∑–∞ –∫–∞–∂–¥—É—é –±–∞–∑—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞).

üìä –°–¢–†–£–ö–¢–£–†–ê –ö–ê–†–¢–´ (boardStr):
–ö–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 10x10 –∫–ª–µ—Ç–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (0,0) –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.
–°–ò–ú–í–û–õ–´ –ù–ê –ö–ê–†–¢–ï:
- üîµ(0,0), üü°(9,0), üü¢(9,9), ‚ö™(0,9) - –±–∞–∑—ã –∏–≥—Ä–æ–∫–æ–≤
- üö´ - –±–∞–∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ (–±–æ–Ω—É—Å +10 –¥–∏–≤–∏–∑–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
- üí∞ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω (+1 –¥–∏–≤–∏–∑–∏—è)
- üèúÔ∏è - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω
- –°3, –ñ5, –†2, –ó1 - –≤–æ–π—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (–°=–°–∏–Ω–∏–π, –ñ=–ñ–µ–ª—Ç—ã–π, –†=–°–µ—Ä—ã–π, –ó=–ó–µ–ª–µ–Ω—ã–π, —Ü–∏—Ñ—Ä–∞=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
- . - –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
- ? - –∫–ª–µ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∞ —Ç—É–º–∞–Ω–æ–º –≤–æ–π–Ω—ã

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:

\`\`\`json
{
  "moves": [
    {
      "fromX": 0, "fromY": 0,
      "toX": 1, "toY": 0,
      "unitCount": 3
    }
  ],
  "diplomacy": [
    {
      "to": "gray",
      "content": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
    }
  ],
  "reasoning": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
}
\`\`\`

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í moves —É–∫–∞–∂–∏ —Ö–æ–¥—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [] (–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞)
- –í diplomacy –¥–æ 2 —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã fromX/fromY –∏–∑ —Å–µ–∫—Ü–∏–∏ "–¢–í–û–ò –í–û–ô–°–ö–ê"`;

        // User message with current game state
        const userPrompt = `–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
- –•–æ–¥: ${currentTurn}
- –¢–í–û–ò –í–û–ô–°–ö–ê: ${myUnitsStr}

${boardStr}

–°–¥–µ–ª–∞–π —Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.`;

        return { systemPrompt, userPrompt };
    }

    async callOpenRouter(model, systemPrompt, userPrompt) {
        const requestBody = {
            model: model,
            messages: [
                {
                    role: 'system',
                    content: systemPrompt
                },
                {
                    role: 'user',
                    content: userPrompt
                }
            ],
            temperature: 0.3,
            max_tokens: 1500,
            top_p: 0.9
        };

        // –ü–û–õ–ù–´–ô JSON –ó–ê–ü–†–û–° –ö –ú–û–î–ï–õ–ò
        console.log('üì§ JSON –∑–∞–ø—Ä–æ—Å:', JSON.stringify(requestBody, null, 2));

        const response = await fetch(`${this.baseUrl}/chat/completions`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${this.getApiKey()}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': window.location.origin,
                'X-Title': 'AI Strategic Battle'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const error = await response.text();
            console.error(`‚ùå HTTP Error: ${response.status} - ${error}`);
            
            if (response.status === 429) {
                await new Promise(resolve => setTimeout(resolve, 5000));
                throw new Error('Rate limit exceeded, retry after delay');
            }
            
            throw new Error(`OpenRouter API error: ${response.status} - ${error}`);
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;
        
        // –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        console.log('üì• –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', aiResponse);
        
        return aiResponse;
    }

    parseAIResponse(response, gameState, requestId = 'unknown') {
        try {
            // Try multiple JSON extraction methods
            let jsonStr = null;
            
            // Method 1: Look for JSON block with code markers
            const codeBlockMatch = response.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/i);
            if (codeBlockMatch) {
                jsonStr = codeBlockMatch[1];
                
                // Quick check if JSON looks truncated
                if (!jsonStr.includes('"reasoning"') || !jsonStr.endsWith('}')) {
                    jsonStr = null; // Force try other methods
                }
            } else {
                // Method 2: Find the first complete JSON object
                const jsonMatch = response.match(/\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/);
                if (jsonMatch) {
                    jsonStr = jsonMatch[0];
                } else {
                    // Method 3: Try to find any curly braces content
                    const fallbackMatch = response.match(/\{[\s\S]*\}/);
                    if (fallbackMatch) {
                        jsonStr = fallbackMatch[0];
                    }
                }
            }
            
            if (!jsonStr) {
                throw new Error('No JSON found in response');
            }

            let decision = JSON.parse(jsonStr);
            
            // Check if response was truncated (missing required structure)
            if (!decision.moves || !decision.reasoning) {
                throw new Error('Truncated response: missing required fields (moves, reasoning)');
            }
            
            // Fix common AI mistakes
            if (decision.diplom–∞cy && !decision.diplomacy) {
                // Fix Cyrillic '–∞' instead of Latin 'a' in diplomacy
                decision.diplomacy = decision.diplom–∞cy;
                delete decision.diplom–∞cy;
            }
            
            if (decision.dipl–æ–º–∞—Ç–∏—è && !decision.diplomacy) {
                // Fix Russian word "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è"
                decision.diplomacy = decision.dipl–æ–º–∞—Ç–∏—è;
                delete decision.dipl–æ–º–∞—Ç–∏—è;
            }
            
            // Validate decision structure
            if (!decision.moves || !Array.isArray(decision.moves) || decision.moves.length === 0) {
                throw new Error('Invalid moves in AI response');
            }

            // Validate moves
            decision.moves.forEach(move => {
                if (typeof move.fromX !== 'number' || typeof move.fromY !== 'number' ||
                    typeof move.toX !== 'number' || typeof move.toY !== 'number' ||
                    typeof move.unitCount !== 'number') {
                    throw new Error('Invalid move format');
                }
            });

            // Validate diplomacy if present (now array of up to 2 messages, no isLie needed)
            if (decision.diplomacy && Array.isArray(decision.diplomacy)) {
                // Filter out invalid messages and limit to 2
                decision.diplomacy = decision.diplomacy.filter(msg => 
                    msg && typeof msg.to === 'string' && typeof msg.content === 'string'
                ).slice(0, 2); // Max 2 messages
                
                if (decision.diplomacy.length === 0) {
                    decision.diplomacy = null;
                }
            } else if (decision.diplomacy && typeof decision.diplomacy.to === 'string') {
                // Legacy support: convert single diplomacy object to array
                decision.diplomacy = [decision.diplomacy];
            } else {
                decision.diplomacy = null;
            }

            return decision;
        } catch (error) {
            console.error(`‚ùå Error parsing AI response for ${gameState.playerId}:`, error.message);
            
            // Return fallback decision
            return this.generateRandomDecision(gameState);
        }
    }

    generateRandomDecision(gameState) {
        const { board, playerId } = gameState;
        const moves = [];
        
        // Find player's units
        for (let y = 0; y < 10; y++) {
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible && cell.units.length > 0) {
                    const playerUnit = cell.units.find(u => u.player === playerId);
                    if (playerUnit && playerUnit.count > 0) {
                        // Try to make a random valid move
                        const directions = [
                            { dx: 0, dy: -1 }, { dx: 1, dy: 0 },
                            { dx: 0, dy: 1 }, { dx: -1, dy: 0 }
                        ];
                        
                        for (const dir of directions) {
                            const newX = x + dir.dx;
                            const newY = y + dir.dy;
                            
                            if (newX >= 0 && newX < 10 && newY >= 0 && newY < 10) {
                                moves.push({
                                    fromX: x,
                                    fromY: y,
                                    toX: newX,
                                    toY: newY,
                                    unitCount: Math.min(1, playerUnit.count)
                                });
                                break;
                            }
                        }
                        
                        if (moves.length > 0) break;
                    }
                }
            }
            if (moves.length > 0) break;
        }
        
        // If no valid moves found, this is a problem
        if (moves.length === 0) {
            console.error('No valid moves found for fallback decision');
            // Return a default move (this shouldn't happen in normal gameplay)
            moves.push({
                fromX: 0, fromY: 0, toX: 1, toY: 0, unitCount: 1
            });
        }
        
        return {
            moves: moves,
            diplomacy: [], // Empty array for no diplomacy
            reasoning: "–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI"
        };
    }

    // Queue system for AI requests to avoid rate limits
    async queueRequest(gameState, gameEngine) {
        // Clear queue if it's a different player to avoid conflicts
        const currentPlayerId = gameState.playerId;
        if (this.requestQueue.length > 0) {
            const queuedPlayerId = this.requestQueue[0].gameState.playerId;
            if (queuedPlayerId !== currentPlayerId) {
                // Reject all pending requests from different player
                this.requestQueue.forEach(request => {
                    request.reject(new Error(`Request cancelled: player switch from ${queuedPlayerId} to ${currentPlayerId}`));
                });
                this.requestQueue = [];
                this.isProcessing = false;
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                this.activeRequestId = null;
            }
        }
        
        return new Promise((resolve, reject) => {
            this.requestQueue.push({
                gameState,
                gameEngine,
                resolve,
                reject
            });
            
            if (!this.isProcessing) {
                this.processQueue();
            }
        });
    }

    async processQueue() {
        if (this.requestQueue.length === 0) {
            this.isProcessing = false;
            return;
        }
        
        this.isProcessing = true;
        const request = this.requestQueue.shift();
        
        try {
            const decision = await this.makeAIDecision(request.gameState, request.gameEngine);
            request.resolve(decision);
        } catch (error) {
            request.reject(error);
        }
        
        // Process next request immediately
        this.processQueue();
    }

    // Test API connection
    async testConnection() {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        try {
            const response = await fetch(`${this.baseUrl}/models`, {
                headers: {
                    'Authorization': `Bearer ${this.getApiKey()}`
                }
            });

            if (!response.ok) {
                throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
            }

            return true;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${error.message}`);
        }
    }

    // Generate commentator commentary
    async generateCommentary(gameEngine, lastMove = null) {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        try {
            const { systemPrompt, userPrompt } = this.generateCommentatorPrompt(gameEngine, lastMove);
            
            const response = await this.callOpenRouter(this.commentatorModel, systemPrompt, userPrompt);
            
            if (!response || response.trim().length < 10) {
                throw new Error('–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞');
            }
            
            // Parse commentary response
            const commentary = this.parseCommentaryResponse(response);
            
            return commentary;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞:`, error.message);
            // Return fallback commentary
            return this.generateFallbackCommentary(gameEngine, lastMove);
        }
    }

    // Generate commentator prompt
    generateCommentatorPrompt(gameEngine, lastMove) {
        const systemPrompt = `–¢—ã - –í–û–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–¢–ò–ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨ –†–ï–ê–õ–¨–ù–£–Æ —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ.

üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ç–æ —á—Ç–æ –í–ò–î–ò–®–¨ –Ω–∞ –∫–∞—Ä—Ç–µ
- –ù–ï –í–´–î–£–ú–´–í–ê–ô –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≥—Ä–æ–∑—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Å–µ–≤–µ—Ä (–≤–≤–µ—Ä—Ö), —é–≥ (–≤–Ω–∏–∑), –∑–∞–ø–∞–¥ (–≤–ª–µ–≤–æ), –≤–æ—Å—Ç–æ–∫ (–≤–ø—Ä–∞–≤–æ)
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –†–ï–ê–õ–¨–ù–´–• —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö

üìã –ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
1. üö® –¢–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
   - –ö—Ç–æ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏ –∫—É–¥–∞ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
   - –ö–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ —É–≥—Ä–æ–∑—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
   - –£–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—Ç–∞–∫–∏

2. üé≠ –î–ò–ü–õ–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:
   - –°—Ä–∞–≤–Ω–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
   - –ö—Ç–æ –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–µ—â–∞–Ω–∏—è

3. üè∞ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –¶–ï–õ–ò:
   - –ö—Ç–æ –±–ª–∏–∂–µ –∫ —á—É–∂–æ–π –±–∞–∑–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ (+10 –¥–∏–≤–∏–∑–∏–π)
   - –ü–æ—á–µ–º—É –Ω–µ –∞—Ç–∞–∫—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏

üìù –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞, –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë—É–¥—å –ö–û–ù–ö–†–ï–¢–ï–ù –∏ –¢–û–ß–ï–ù!`;

        // Create full game state for commentator
        let gameStateStr = "–ü–û–õ–ù–ê–Ø –ö–ê–†–¢–ê –ò–ì–†–´ (–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å—ë):\n";
        gameStateStr += "   0 1 2 3 4 5 6 7 8 9\n";
        
        for (let y = 0; y < 10; y++) {
            gameStateStr += y + " ";
            for (let x = 0; x < 10; x++) {
                const cell = gameEngine.board[y][x];
                if (cell.units.length === 0) {
                    if (cell.resourceCell) {
                        gameStateStr += cell.depleted ? "üèúÔ∏è " : "üí∞ ";
                    } else {
                        gameStateStr += " . ";
                    }
                } else {
                    const unit = cell.units[0];
                    const playerSymbol = {
                        'blue': '–°',
                        'yellow': '–ñ', 
                        'gray': '–†',
                        'green': '–ó'
                    }[unit.player] || '?';
                    gameStateStr += unit.count < 10 ? ` ${playerSymbol}${unit.count}` : `${playerSymbol}${unit.count}`;
                }
            }
            gameStateStr += "\n";
        }
        
        // Add legend for commentator to understand the map
        gameStateStr += "\nüìã –õ–ï–ì–ï–ù–î–ê –ö–ê–†–¢–´:\n";
        gameStateStr += "- –° = –°–∏–Ω–∏–π –∏–≥—Ä–æ–∫ (blue)\n";
        gameStateStr += "- –ñ = –ñ–µ–ª—Ç—ã–π –∏–≥—Ä–æ–∫ (yellow)\n";
        gameStateStr += "- –† = –°–µ—Ä—ã–π –∏–≥—Ä–æ–∫ (gray)\n";
        gameStateStr += "- –ó = –ó–µ–ª–µ–Ω—ã–π –∏–≥—Ä–æ–∫ (green)\n";
        gameStateStr += "- üí∞ = –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω (+1 –¥–∏–≤–∏–∑–∏—è) - –í–ê–ñ–ù–û!\n";
        gameStateStr += "- üèúÔ∏è = –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω\n";
        gameStateStr += "- . = –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞\n";
        gameStateStr += "- –¶–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ –±—É–∫–≤—ã = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–≤–∏–∑–∏–π –Ω–∞ –∫–ª–µ—Ç–∫–µ\n";
        
        // Add directional reference for commentator
        gameStateStr += "\nüß≠ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø (–í–ê–ñ–ù–û –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):\n";
        gameStateStr += "- –°–µ–≤–µ—Ä (–≤–≤–µ—Ä—Ö): y —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è (0,0) ‚Üí (0,1) ‚Üí (0,2)...\n";
        gameStateStr += "- –Æ–≥ (–≤–Ω–∏–∑): y —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è (0,9) ‚Üí (0,8) ‚Üí (0,7)...\n";
        gameStateStr += "- –ó–∞–ø–∞–¥ (–≤–ª–µ–≤–æ): x —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è (0,0) ‚Üí (1,0) ‚Üí (2,0)...\n";
        gameStateStr += "- –í–æ—Å—Ç–æ–∫ (–≤–ø—Ä–∞–≤–æ): x —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è (0,0) ‚Üí (1,0) ‚Üí (2,0)...\n";
        gameStateStr += "- –°–µ—Ä—ã–π (0,9) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ó–ê–ü–ê–î–ù–ï–ï –∏ –Æ–ñ–ù–ï–ï –°–∏–Ω–µ–≥–æ (0,0)\n";
        gameStateStr += "- –ñ–µ–ª—Ç—ã–π (9,0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–û–°–¢–û–ß–ù–ï–ï –∏ –°–ï–í–ï–†–ù–ï–ï –ó–µ–ª–µ–Ω–æ–≥–æ (9,9)\n";
        
        // Add REAL current status of central resources
        gameStateStr += "\nüö® –†–ï–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –¶–ï–ù–¢–†–ê–õ–¨–ù–´–• –†–ï–°–£–†–°–û–í:\n";
        const centralCells = [
            { x: 4, y: 4 }, { x: 4, y: 5 },
            { x: 5, y: 4 }, { x: 5, y: 5 }
        ];
        
        centralCells.forEach(({ x, y }) => {
            const cell = gameEngine.board[y][x];
            if (cell.resourceCell) {
                if (cell.depleted) {
                    gameStateStr += `- –ö–ª–µ—Ç–∫–∞ (${x},${y}): üèúÔ∏è –†–ï–°–£–†–° –ò–°–ß–ï–†–ü–ê–ù\n`;
                } else {
                    gameStateStr += `- –ö–ª–µ—Ç–∫–∞ (${x},${y}): üí∞ –†–ï–°–£–†–° –î–û–°–¢–£–ü–ï–ù (+1 –¥–∏–≤–∏–∑–∏—è)\n`;
                }
            }
        });
        
        // Add strategic analysis based on current resource status
        const availableResources = centralCells.filter(({ x, y }) => 
            gameEngine.board[y][x].resourceCell && !gameEngine.board[y][x].depleted
        ).length;
        
        if (availableResources === 0) {
            gameStateStr += "\n‚ö†Ô∏è –í–ê–ñ–ù–û: –í–°–ï —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω—ã!\n";
            gameStateStr += "- –¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - –∑–∞—Ö–≤–∞—Ç –±–∞–∑ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ (+10 –¥–∏–≤–∏–∑–∏–π)\n";
            gameStateStr += "- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫—Ç–æ –±–ª–∏–∂–µ –∫ —á—É–∂–æ–π –±–∞–∑–µ –∏ –ø–æ—á–µ–º—É –Ω–µ –∞—Ç–∞–∫—É–µ—Ç\n";
        } else {
            gameStateStr += `\n‚ö†Ô∏è –í–ê–ñ–ù–û: –î–æ—Å—Ç—É–ø–Ω–æ ${availableResources} —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤\n`;
            gameStateStr += "- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Ö –∑–∞—Ö–≤–∞—Ç–∏—Ç—å\n";
        }
        
        // Add tactical analysis hints
        gameStateStr += "\nüéØ –¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:\n";
        gameStateStr += "- –û—Ü–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–π—Å–∫ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n";
        gameStateStr += "- –ò—â–∏ —É–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n";
        gameStateStr += "- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤\n";
        gameStateStr += "- –°—Ä–∞–≤–Ω–∏ –∑–∞—è–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏\n";
        
        // Add base capture analysis
        gameStateStr += "\nüè∞ –ê–ù–ê–õ–ò–ó –ó–ê–•–í–ê–¢–ê –ë–ê–ó:\n";
        const homeBases = {
            'blue': { x: 0, y: 0, name: '–°–∏–Ω–∏–π' },
            'yellow': { x: 9, y: 0, name: '–ñ–µ–ª—Ç—ã–π' },
            'green': { x: 9, y: 9, name: '–ó–µ–ª–µ–Ω—ã–π' },
            'gray': { x: 0, y: 9, name: '–°–µ—Ä—ã–π' }
        };
        
        gameEngine.players.forEach(player => {
            if (player.units > 0) {
                // Find closest enemy base for this player
                let closestBase = null;
                let minDistance = Infinity;
                
                Object.entries(homeBases).forEach(([enemyId, base]) => {
                    if (enemyId !== player.id) {
                        // Find player's closest unit to this enemy base
                        for (let y = 0; y < 10; y++) {
                            for (let x = 0; x < 10; x++) {
                                const cell = gameEngine.board[y][x];
                                const playerUnitsOnCell = cell.units.filter(u => u.player === player.id);
                                if (playerUnitsOnCell.length > 0) {
                                    const distance = Math.abs(x - base.x) + Math.abs(y - base.y);
                                    if (distance < minDistance) {
                                        minDistance = distance;
                                        closestBase = { ...base, distance };
                                    }
                                }
                            }
                        }
                    }
                });
                
                if (closestBase) {
                    gameStateStr += `- ${player.name}: –±–ª–∏–∂–∞–π—à–∞—è –±–∞–∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ${closestBase.name} –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${closestBase.distance} –∫–ª–µ—Ç–æ–∫\n`;
                    if (closestBase.distance <= 3) {
                        gameStateStr += `  ‚ö†Ô∏è ${player.name} –ú–û–ñ–ï–¢ –ê–¢–ê–ö–û–í–ê–¢–¨ –±–∞–∑—É ${closestBase.name} –∑–∞ 1-2 —Ö–æ–¥–∞!\n`;
                    }
                }
            }
        });

        // Add players status
        let playersStr = "\nüë• –°–¢–ê–¢–£–° –ò–ì–†–û–ö–û–í:\n";
        gameEngine.players.forEach(p => {
            playersStr += `- ${p.name}: ${p.units} –¥–∏–≤–∏–∑–∏–π ${p.units > 0 ? '(–∂–∏–≤)' : '(–º–µ—Ä—Ç–≤)'}\n`;
        });
        
        // Add detailed unit positions for better analysis
        let positionsStr = "\nüìç –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –í–û–ô–°–ö:\n";
        gameEngine.players.forEach(p => {
            if (p.units > 0) {
                const playerUnits = [];
                for (let y = 0; y < 10; y++) {
                    for (let x = 0; x < 10; x++) {
                        const cell = gameEngine.board[y][x];
                        const playerUnitsOnCell = cell.units.filter(u => u.player === p.id);
                        if (playerUnitsOnCell.length > 0) {
                            const totalUnits = playerUnitsOnCell.reduce((sum, u) => sum + u.count, 0);
                            playerUnits.push(`(${x},${y}): ${totalUnits} –¥–∏–≤–∏–∑–∏–π`);
                        }
                    }
                }
                positionsStr += `- ${p.name}: ${playerUnits.join(', ')}\n`;
            }
        });

        // Add diplomacy summary
        let diplomacyStr = "\nüí¨ –î–ò–ü–õ–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:\n";
        const allMessages = [];
        gameEngine.players.forEach(player => {
            player.diplomacyHistory.forEach(msg => {
                if (msg.type === 'sent') {
                    allMessages.push({
                        ...msg,
                        fromName: player.name,
                        toName: gameEngine.players.find(p => p.id === msg.to)?.name || 'Unknown'
                    });
                }
            });
        });
        
        if (allMessages.length > 0) {
            // Show more messages for better analysis
            const recentMessages = allMessages.slice(-6);
            diplomacyStr += "üìä –î–ò–ü–õ–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–°–¢–û–†–ò–Ø (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):\n";
            recentMessages.forEach(msg => {
                const turnInfo = `[–•–æ–¥ ${msg.turn}]`;
                const messagePreview = msg.content.length > 60 ? 
                    msg.content.substring(0, 60) + '...' : 
                    msg.content;
                diplomacyStr += `- ${turnInfo} ${msg.fromName} ‚Üí ${msg.toName}: "${messagePreview}"\n`;
            });
            
            // Add analysis instructions
            diplomacyStr += "\nüîç –ê–ù–ê–õ–ò–ó –î–ò–ü–õ–û–ú–ê–¢–ò–ò:\n";
            diplomacyStr += "- –°—Ä–∞–≤–Ω–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ\n";
            diplomacyStr += "- –ò—â–∏ –æ–±–º–∞–Ω—ã, –±–ª–µ—Ñ –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–±–µ—â–∞–Ω–∏—è\n";
            diplomacyStr += "- –û—Ü–µ–Ω–∏, –∫—Ç–æ —Å–æ–±–ª—é–¥–∞–µ—Ç, –∞ –∫—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n";
            diplomacyStr += "- –í—ã—è–≤–∏ —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã –∑–∞ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–∞–Ω–µ–≤—Ä–∞–º–∏\n";
        } else {
            diplomacyStr += "- –ü–æ–∫–∞ –Ω–µ—Ç –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n";
            diplomacyStr += "- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –≤–æ–µ–Ω–Ω—É—é —Ç–∞–∫—Ç–∏–∫—É\n";
        }

        // Add last move context if available
        let moveContextStr = "";
        if (lastMove) {
            moveContextStr = `\nüéØ –ü–û–°–õ–ï–î–ù–ò–ô –•–û–î:\n`;
            moveContextStr += `- ${lastMove.playerName} —Å–¥–µ–ª–∞–ª ${lastMove.movesCount} —Ö–æ–¥–æ–≤`;
            if (lastMove.diplomacyCount > 0) {
                moveContextStr += `, –æ—Ç–ø—Ä–∞–≤–∏–ª ${lastMove.diplomacyCount} –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`;
            }
            moveContextStr += `\n`;
        }

        const userPrompt = `–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø –í –ò–ì–†–ï:
- –•–æ–¥: ${gameEngine.currentTurn}
- –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: ${gameEngine.players[gameEngine.currentPlayerIndex]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üîç –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:

üö® –í–û–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
${gameStateStr}

${playersStr}

${positionsStr}

üé≠ –î–ò–ü–õ–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–°–¢–û–†–ò–Ø:
${diplomacyStr}

${moveContextStr}

üéØ –ó–ê–î–ê–ß–ê –ê–ù–ê–õ–ò–¢–ò–ö–ê:
–ü–†–û–í–ï–î–ò –ö–û–ù–ö–†–ï–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –°–ò–¢–£–ê–¶–ò–ò:

1. **–ü–û–ó–ò–¶–ò–ò –ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø**: –ö—Ç–æ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è? –ö–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ —É–≥—Ä–æ–∑—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç?

2. **–£–ü–£–©–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò**: –ö—Ç–æ –±–ª–∏–∂–µ –∫ —á—É–∂–æ–π –±–∞–∑–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ (+10 –¥–∏–≤–∏–∑–∏–π)? –ü–æ—á–µ–º—É –Ω–µ –∞—Ç–∞–∫—É–µ—Ç?

3. **–¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò**: –ö—Ç–æ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π?

4. **–î–ò–ü–õ–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø**: –ö—Ç–æ —á—Ç–æ –æ–±–µ—â–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–∏ —ç—Ç–æ?

‚ö†Ô∏è –í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ç–æ —á—Ç–æ –í–ò–î–ò–®–¨ –Ω–∞ –∫–∞—Ä—Ç–µ! –ù–ï –í–´–î–£–ú–´–í–ê–ô –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≥—Ä–æ–∑—ã!
–ò—Å–ø–æ–ª—å–∑—É–π –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Å–µ–≤–µ—Ä (–≤–≤–µ—Ä—Ö), —é–≥ (–≤–Ω–∏–∑), –∑–∞–ø–∞–¥ (–≤–ª–µ–≤–æ), –≤–æ—Å—Ç–æ–∫ (–≤–ø—Ä–∞–≤–æ)!`;

        return { systemPrompt, userPrompt };
    }

    // Parse commentary response
    parseCommentaryResponse(response) {
        // Clean up response - remove markdown, extra formatting
        let commentary = response.trim();
        
        // Remove code blocks if present
        commentary = commentary.replace(/```.*?```/gs, '');
        
        // Remove quotes if present
        commentary = commentary.replace(/^["']|["']$/g, '');
        
        // Limit length
        if (commentary.length > 200) {
            commentary = commentary.substring(0, 200) + '...';
        }
        
        return commentary;
    }

    // Generate fallback commentary
    generateFallbackCommentary(gameEngine, lastMove) {
        const alivePlayers = gameEngine.players.filter(p => p.units > 0);
        const totalMessages = gameEngine.players.reduce((sum, p) => sum + p.diplomacyHistory.length, 0);
        
        if (alivePlayers.length <= 1) {
            return "–ò–≥—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É - –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∂–∏–≤—à–∏–π!";
        }
        
        if (totalMessages > 0) {
            // Analyze diplomatic activity for fallback
            const recentMessages = [];
            gameEngine.players.forEach(player => {
                player.diplomacyHistory.forEach(msg => {
                    if (msg.type === 'sent') {
                        recentMessages.push({
                            from: player.name,
                            to: gameEngine.players.find(p => p.id === msg.to)?.name || 'Unknown',
                            turn: msg.turn
                        });
                    }
                });
            });
            
            if (recentMessages.length > 0) {
                const latestMessage = recentMessages[recentMessages.length - 1];
                return `–ê–Ω–∞–ª–∏–∑: ${latestMessage.from} –≤–µ–¥–µ—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å ${latestMessage.to} - –ø—Ä–æ–≤–µ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏–π!`;
            }
            
            return "–î–∏–ø–ª–æ–º–∞—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–≤ –∏ –¥–µ–ª!";
        }
        
        // Analyze current tactical situation for fallback
        const centralCells = [
            { x: 4, y: 4 }, { x: 4, y: 5 },
            { x: 5, y: 4 }, { x: 5, y: 5 }
        ];
        
        const availableResources = centralCells.filter(({ x, y }) => 
            gameEngine.board[y][x].resourceCell && !gameEngine.board[y][x].depleted
        ).length;
        
        if (availableResources === 0) {
            return "–ê–Ω–∞–ª–∏–∑: –í—Å–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞—Ö–≤–∞—á–µ–Ω—ã - —Ñ–æ–∫—É—Å –Ω–∞ –∑–∞—Ö–≤–∞—Ç–µ –±–∞–∑ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ (+10 –¥–∏–≤–∏–∑–∏–π)!";
        } else {
            return `–ê–Ω–∞–ª–∏–∑: –î–æ—Å—Ç—É–ø–Ω–æ ${availableResources} —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏–∫—É –∑–∞—Ö–≤–∞—Ç–∞!`;
        }
    }

    // Get model status
    async getModelStatus() {
        const modelStatus = {};
        
        for (const [playerId, modelName] of Object.entries(this.models)) {
            try {
                const response = await fetch(`${this.baseUrl}/models/${modelName}`, {
                    headers: {
                        'Authorization': `Bearer ${this.getApiKey()}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    modelStatus[playerId] = {
                        available: true,
                        model: modelName,
                        info: data
                    };
                } else {
                    modelStatus[playerId] = {
                        available: false,
                        model: modelName,
                        error: `HTTP ${response.status}`
                    };
                }
            } catch (error) {
                modelStatus[playerId] = {
                    available: false,
                    model: modelName,
                    error: error.message
                };
            }
        }
        
        return modelStatus;
    }
}