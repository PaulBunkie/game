class AIIntegration {
    constructor() {
        this.apiKey = '';
        this.baseUrl = 'https://openrouter.ai/api/v1';
        this.models = {
            'blue': 'google/gemma-3-27b-it:free',
            'yellow': 'meta-llama/llama-3.3-70b-instruct:free',
            'gray': 'mistralai/mistral-small-3.2-24b-instruct:free',
            'green': 'qwen/qwen-2.5-72b-instruct:free'
        };
        this.requestQueue = [];
        this.isProcessing = false;
        this.activeRequestId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        this.requestCounter = 0; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    }

    setApiKey(apiKey) {
        this.apiKey = apiKey;
        localStorage.setItem('openrouter_api_key', apiKey);
    }

    getApiKey() {
        if (!this.apiKey) {
            this.apiKey = localStorage.getItem('openrouter_api_key') || '';
        }
        return this.apiKey;
    }

    async makeAIDecision(gameState, gameEngine, retryCount = 0, requestId = null) {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        const playerId = gameState.playerId;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!requestId) {
            requestId = `${playerId}-${++this.requestCounter}`;
            this.activeRequestId = requestId;
        }
        
        const model = this.models[playerId];
        
        if (!model) {
            throw new Error(`–ú–æ–¥–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        const prompt = this.generatePrompt(gameState);
        
        try {
            console.log(`üîç AI ${playerId}: –í—ã–∑—ã–≤–∞—é OpenRouter API –¥–ª—è –º–æ–¥–µ–ª–∏ ${model}`);
            const response = await this.callOpenRouter(model, prompt);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            if (this.activeRequestId !== requestId) {
                throw new Error(`Stale request: ${requestId} != ${this.activeRequestId}`);
            }
            
            console.log(`‚úÖ AI ${playerId}: –ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${response?.length || 0}`);
            
            // Check if response is empty or too short
            if (!response || response.trim().length < 10) {
                throw new Error('–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç AI');
            }
            
            const decision = this.parseAIResponse(response, gameState, requestId);
            
            // Check if we got a fallback decision and retry if so
            if (decision.reasoning === "–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI" && retryCount < 2) {
                console.log(`üîÑ AI ${playerId}: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑-–∑–∞ fallback —Ä–µ—à–µ–Ω–∏—è`);
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                return this.makeAIDecision(gameState, gameEngine, retryCount + 1, requestId);
            }
            
            return decision;
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            if (this.activeRequestId !== requestId) {
                throw error; // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞
            }
            
            console.error(`‚ùå –û—à–∏–±–∫–∞ AI –¥–ª—è ${playerId} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error.message);
            
            // Retry up to 2 times
            if (retryCount < 2) {
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                return this.makeAIDecision(gameState, gameEngine, retryCount + 1, requestId);
            }
            
            // Final fallback to random decision
            return this.generateRandomDecision(gameState);
        }
    }

    isHomeBase(x, y, playerId) {
        const homePositions = {
            'blue': { x: 0, y: 0 },
            'yellow': { x: 9, y: 0 },
            'green': { x: 9, y: 9 },
            'gray': { x: 0, y: 9 }
        };
        
        const home = homePositions[playerId];
        return home && x === home.x && y === home.y;
    }

    generatePrompt(gameState) {
        const { playerId, playerName, currentTurn, myUnits, canLie, board, players, diplomacyHistory } = gameState;
        
        // Create visible board representation
        let boardStr = "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã (–≤–∏–¥–∏–º—ã–µ –≤–∞–º –∫–ª–µ—Ç–∫–∏ + —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã):\n";
        boardStr += "   0 1 2 3 4 5 6 7 8 9\n";
        
        for (let y = 0; y < 10; y++) {
            boardStr += y + " ";
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible) {
                    if (cell.units.length === 0) {
                        // Check if this is a central resource cell
                        if (cell.resourceCell) {
                            if (cell.depleted) {
                                boardStr += "üèúÔ∏è "; // Depleted resource
                            } else {
                                boardStr += "üí∞ "; // Available resource
                            }
                        } else {
                            boardStr += " . ";
                        }
                    } else {
                        const unit = cell.units[0]; // Show first unit
                        const playerSymbol = {
                            'blue': '–°',
                            'yellow': '–ñ', 
                            'gray': '–†',
                            'green': '–ó'
                        }[unit.player] || '?';
                        boardStr += unit.count < 10 ? ` ${playerSymbol}${unit.count}` : `${playerSymbol}${unit.count}`;
                    }
                } else {
                    // Check if this is a central resource cell (always visible)
                    if (cell.resourceCell) {
                        if (cell.depleted) {
                            boardStr += "üèúÔ∏è "; // Depleted resource
                        } else {
                            boardStr += "üí∞ "; // Available resource
                        }
                    } else {
                        boardStr += " ? ";
                    }
                }
            }
            boardStr += "\n";
        }

        // Create my units positions
        let myUnitsStr = "–¢–í–û–ò –í–û–ô–°–ö–ê:\n";
        let foundMyUnits = [];
        
        for (let y = 0; y < 10; y++) {
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible && cell.units.length > 0) {
                    const myUnit = cell.units.find(u => u.player === playerId);
                    if (myUnit && myUnit.count > 0) {
                        foundMyUnits.push(`(${x},${y}): ${myUnit.count} –¥–∏–≤–∏–∑–∏–π`);
                        // Highlight home base units (they might be bonus units)
                        const isHomeBase = this.isHomeBase(x, y, playerId);
                        const homeBaseMarker = isHomeBase ? " üè†" : "";
                        myUnitsStr += `- –ü–æ–∑–∏—Ü–∏—è (${x},${y}): ${myUnit.count} –¥–∏–≤–∏–∑–∏–π${homeBaseMarker}\n`;
                    }
                }
            }
        }
        
        if (foundMyUnits.length === 0) {
            myUnitsStr += "- –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞—à–∏ –≤–æ–π—Å–∫–∞!\n";
        }
        
        // Create players status
        let playersStr = "–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤:\n";
        players.forEach(p => {
            playersStr += `- ${p.name}: ${p.units} –¥–∏–≤–∏–∑–∏–π ${p.isAlive ? '(–∂–∏–≤)' : '(–º–µ—Ä—Ç–≤)'}\n`;
        });

        // Create central resources status (always visible to all players)
        let resourcesStr = "\nüí∞ –°–¢–ê–¢–£–° –¶–ï–ù–¢–†–ê–õ–¨–ù–´–• –†–ï–°–£–†–°–û–í:\n";
        const centralCells = [
            { x: 4, y: 4 }, { x: 4, y: 5 },
            { x: 5, y: 4 }, { x: 5, y: 5 }
        ];
        
        centralCells.forEach(({ x, y }) => {
            const cell = board[y][x];
            if (cell.resourceCell) {
                if (cell.depleted) {
                    resourcesStr += `- –ö–ª–µ—Ç–∫–∞ (${x},${y}): üèúÔ∏è –†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω\n`;
                } else {
                    resourcesStr += `- –ö–ª–µ—Ç–∫–∞ (${x},${y}): üí∞ –†–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω (+1 –¥–∏–≤–∏–∑–∏—è)\n`;
                }
            }
        });

        // Create diplomacy history
        let diplomacyStr = "";
        if (diplomacyHistory && diplomacyHistory.length > 0) {
            diplomacyStr = "\n‚ö†Ô∏è –ò–°–¢–û–†–ò–Ø –î–ò–ü–õ–û–ú–ê–¢–ò–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–ß–¢–ò –ò –û–¢–†–ï–ê–ì–ò–†–£–ô:\n";
            diplomacyStr += "üíÄ –ü–û–ú–ù–ò: –î–∏–ø–ª–æ–º–∞—Ç–∏—è - —ç—Ç–æ —Ç–æ–∂–µ –æ—Ä—É–∂–∏–µ!\n";
            
            // Show last 10 messages
            const recentMessages = diplomacyHistory.slice(-10);
            recentMessages.forEach(msg => {
                const direction = msg.type === 'sent' ? '‚Üí' : '‚¨ÖÔ∏è';
                const otherPlayer = msg.type === 'sent' ? msg.to : msg.from;
                
                // Make incoming messages more visible
                const prefix = msg.type === 'received' ? 'üîî –í–•–û–î–Ø–©–ï–ï: ' : '';
                
                diplomacyStr += `${prefix}–•–æ–¥ ${msg.turn}: ${direction} ${otherPlayer}: "${msg.content}"\n`;
            });
        } else {
            diplomacyStr = "\nüì≠ –ò–°–¢–û–†–ò–Ø –î–ò–ü–õ–û–ú–ê–¢–ò–ò: –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n";
            diplomacyStr += "üíÄ –ù–ê–ß–ò–ù–ê–ô –ò–ì–†–£: –ò—Å–ø–æ–ª—å–∑—É–π –¥–∏–ø–ª–æ–º–∞—Ç–∏—é –¥–ª—è —Å–≤–æ–µ–π –ø–æ–±–µ–¥—ã!\n";
        }

        const prompt = `–¢—ã –∏–≥—Ä–∞–µ—à—å –≤ –ø–æ—à–∞–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É –∫–∞–∫ ${playerName}.

üéØ –¶–ï–õ–¨ –ò–ì–†–´: –£–ù–ò–ß–¢–û–ñ–ò–¢–¨ –í–°–ï–• –°–û–ü–ï–†–ù–ò–ö–û–í! –û—Å—Ç–∞—Ç—å—Å—è –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ - –¢–´!
‚öîÔ∏è –≠–¢–û –í–û–ô–ù–ê –ù–ê –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï - –ø–æ–±–µ–¥–∞ –ª—é–±–æ–π —Ü–µ–Ω–æ–π, –Ω–æ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—é–∑—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã!

–ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
- –ö–∞—Ä—Ç–∞ 10x10, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ 4 –∫–≤–∞–¥—Ä–∞–Ω—Ç–∞
- –ö–∞–∂–¥–∞—è –¥–∏–≤–∏–∑–∏—è –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ 1 –∫–ª–µ—Ç–∫—É (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- –î–æ–ø—É—Å—Ç–∏–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –≤–≤–µ—Ä—Ö (y-1), –≤–Ω–∏–∑ (y+1), –≤–ª–µ–≤–æ (x-1), –≤–ø—Ä–∞–≤–æ (x+1)
- –ú–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –í–°–ï –¥–∏–≤–∏–∑–∏–∏, –ù–ï–°–ö–û–õ–¨–ö–û –∏–ª–∏ –ù–ò –û–î–ù–û–ô
- üè† –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–≤–∏–∑–∏–∏, –≤–∫–ª—é—á–∞—è —Ç–µ —á—Ç–æ –≤ –¥–æ–º–∞—à–Ω–µ–π –±–∞–∑–µ!
- –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –î–û –î–í–£–• –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Ö –Ω–µ —É–≤–∏–¥—è—Ç)
- –¢—ã –º–æ–∂–µ—à—å –±–ª–µ—Ñ–æ–≤–∞—Ç—å, –∞ –º–æ–∂–µ—à—å –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º - —ç—Ç–æ —Ç–≤–æ–π –≤—ã–±–æ—Ä. –ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ —Å–æ—é–∑–Ω–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç. –î–æ–≤–µ—Ä—è–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π!
- –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –°–í–û–ï–ú —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥–µ!
- –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –≤—Ä–∞–≥–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–∏—Ç–≤–∞ (—Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–≤–∏–∑–∏–π)
- –í–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –∫–ª–µ—Ç–∫–∏ —Ä—è–¥–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –≤–æ–π—Å–∫–∞–º–∏ (—Ç—É–º–∞–Ω –≤–æ–π–Ω—ã)
- üí∞ –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ï –†–ï–°–£–†–°–´ (4,4)-(5,5) –í–°–ï–ì–î–ê –í–ò–î–ù–´ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º!


–†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –ò–ì–†–û–ö–û–í –ù–ê –ö–ê–†–¢–ï:
- üîµ –°–∏–Ω–∏–π (–°): –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (0,0)-(4,4)
- üü° –ñ–µ–ª—Ç—ã–π (–ñ): –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (5,0)-(9,4)  
- üü¢ –ó–µ–ª–µ–Ω—ã–π (–ó): –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (5,5)-(9,9)
- ‚ö™ –°–µ—Ä—ã–π (–†): –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç (0,5)-(4,9)
–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤: –°–∏–Ω–∏–π ‚Üí –ñ–µ–ª—Ç—ã–π ‚Üí –ó–µ–ª–µ–Ω—ã–π ‚Üí –°–µ—Ä—ã–π

üí∞ –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ï –†–ï–°–£–†–°–´:
- –ö–ª–µ—Ç–∫–∏ (4,4), (4,5), (5,4), (5,5) —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
- –ü–ï–†–í–´–ô –∫—Ç–æ –≤–æ–π–¥–µ—Ç –Ω–∞ —Ä–µ—Å—É—Ä—Å–Ω—É—é –∫–ª–µ—Ç–∫—É –ø–æ–ª—É—á–∏—Ç +1 –¥–∏–≤–∏–∑–∏—é –≤ —Å–≤–æ—é –±–∞–∑—É
- –ü–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞ —Ä–µ—Å—É—Ä—Å –ò–°–ß–ï–†–ü–´–í–ê–ï–¢–°–Ø –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–∞–µ—Ç –±–æ–Ω—É—Å–æ–≤
- –í—Å–µ–≥–æ 4 –±–æ–Ω—É—Å–Ω—ã–µ –¥–∏–≤–∏–∑–∏–∏ –Ω–∞ –≤—Å—é –∏–≥—Ä—É - —Å–ø–µ—à–∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å!
- –ë–æ–Ω—É—Å–Ω—ã–µ –¥–∏–≤–∏–∑–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ç–≤–æ–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —É–≥–ª—É
- üè† –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô: –ë–æ–Ω—É—Å–Ω—ã–µ –¥–∏–≤–∏–∑–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ç–≤–æ–µ–π –¥–æ–º–∞—à–Ω–µ–π –±–∞–∑–µ. –ù–µ –∑–∞–±—ã–≤–∞–π –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å!
- ‚öîÔ∏è –ö–ê–ñ–î–ê–Ø –î–ò–í–ò–ó–ò–Ø –í–ê–ñ–ù–ê: –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤!

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
- –•–æ–¥: ${currentTurn}
- –¢–≤–æ–∏ –¥–∏–≤–∏–∑–∏–∏: ${myUnits}

${myUnitsStr}

${boardStr}

${playersStr}

${resourcesStr}

${diplomacyStr}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã:

\`\`\`json
{
  "moves": [
    {
      "fromX": 0,
      "fromY": 0, 
      "toX": 1,
      "toY": 0,
      "unitCount": 3
    }
  ],
  "diplomacy": [
    {
      "to": "gray",
      "content": "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ—é–∑ –ø—Ä–æ—Ç–∏–≤ –°–∏–Ω–µ–≥–æ! –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤–æ–π—Å–∫ –∏ –Ω–∞ –∫–∞–∫–∏—Ö –æ–Ω–∏ –∫–ª–µ—Ç–∫–∞—Ö?"
    },
    {
      "to": "yellow", 
      "content": "–ì–æ—Ç–æ–≤ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É? –°–µ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–º, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏ –æ—Ç–∫—Ä–æ—é —Ñ—Ä–æ–Ω—Ç –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ"
    }
  ],
  "reasoning": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
}
\`\`\`

–ò–õ–ò –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞:
\`\`\`json
{
  "moves": [],
  "diplomacy": [
    {
      "to": "blue",
      "content": "–ü—Ä–æ–ø—É—Å–∫–∞—é —Ö–æ–¥, –Ω–æ –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º"
    }
  ],
  "reasoning": "–†–µ—à–∏–ª –Ω–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —Ö–æ–¥"
}
\`\`\`

–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã fromX/fromY –∏–∑ —Å–µ–∫—Ü–∏–∏ "–¢–í–û–ò –í–û–ô–°–ö–ê"!

üè† –ü–†–û–í–ï–†–¨ –î–û–ú–ê–®–ù–£–Æ –ë–ê–ó–£: –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –¥–∏–≤–∏–∑–∏–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —É–≥–ª—É - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–º–∏!
üíÄ –¶–ï–õ–¨: –£–ù–ò–ß–¢–û–ñ–ò–¢–¨ –í–°–ï–•! –ö–∞–∂–¥–∞—è –¥–∏–≤–∏–∑–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–æ–±–µ–¥—É!

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í moves –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å —Ö–æ–¥—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [] (–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞)
        - –í diplomacy –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 2 —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
        - –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞: {"to": "blue/yellow/green/gray", "content": "—Ç–µ–∫—Å—Ç"}  
        - üíÄ –î–ò–ü–õ–û–ú–ê–¢–ò–Ø = –û–†–£–ñ–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–º–∞–Ω–∞, –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π!
        - –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –í–û–ü–†–û–°–´ –∏ –¥–µ–ª–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è - —Ä–µ—à–∞–π —Å–∞–º –∫–æ–º—É –≤–µ—Ä–∏—Ç—å!
        - –ü–æ–º–Ω–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–æ—á—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –°–í–û–ï–ú —Ö–æ–¥–µ!
- ‚ö° –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ß–ò–¢–ê–ô –í–•–û–î–Ø–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø (‚Üê) –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ –Ω–∏—Ö!
- üè† –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –°–õ–ï–î–ò –ó–ê –î–ò–í–ò–ó–ò–Ø–ú–ò –í –î–û–ú–ê–®–ù–ï–ô –ë–ê–ó–ï - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–º–∏!
- üíÄ –ë–£–î–¨ –ë–ï–°–ü–û–©–ê–î–ï–ù: –∏—Å–ø–æ–ª—å–∑—É–π –¥–∏–ø–ª–æ–º–∞—Ç–∏—é –¥–ª—è –æ–±–º–∞–Ω–∞, –±–ª–µ—Ñ –¥–ª—è –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ä–∞–∑–≤–µ–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–∞–±–æ—Å—Ç–µ–π
- ‚öîÔ∏è –ê–¢–ê–ö–£–ô –°–õ–ê–ë–´–•: –∏—â–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
- üé≠ –õ–ñ–ò –ò –û–ë–ú–ê–ù–´–í–ê–ô: –¥–∏–ø–ª–æ–º–∞—Ç–∏—è - —ç—Ç–æ –æ—Ä—É–∂–∏–µ, –∞ –Ω–µ –¥—Ä—É–∂–±–∞!
- üèÜ –ü–û–ú–ù–ò: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω - —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–´!

üíÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –¢–≤–æ—è —Ü–µ–ª—å - –£–ù–ò–ß–¢–û–ñ–ò–¢–¨ –í–°–ï–• –°–û–ü–ï–†–ù–ò–ö–û–í! –ë—É–¥—å –±–µ—Å–ø–æ—â–∞–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –ª—é–±—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ–±–µ–¥—ã!

–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û JSON –í –£–ö–ê–ó–ê–ù–ù–û–ú –§–û–†–ú–ê–¢–ï!`;

        return prompt;
    }

    async callOpenRouter(model, prompt) {
        console.log(`üì° OpenRouter: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ ${model}`);
        console.log(`üîë API Key: ${this.getApiKey() ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
        
        const response = await fetch(`${this.baseUrl}/chat/completions`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${this.getApiKey()}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': window.location.origin,
                'X-Title': 'AI Strategic Battle'
            },
            body: JSON.stringify({
                model: model,
                messages: [
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: 0.3,  // Lower temperature for more consistent responses
                max_tokens: 1500,  // More tokens to ensure complete responses
                top_p: 0.9
            })
        });

        console.log(`üì° OpenRouter: HTTP —Å—Ç–∞—Ç—É—Å ${response.status}`);

        if (!response.ok) {
            const error = await response.text();
            console.error(`‚ùå HTTP Error: ${response.status} - ${error}`);
            
            // Handle rate limiting specifically
            if (response.status === 429) {
                console.log(`‚è≥ Rate limit hit, waiting 5 seconds...`);
                await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds
                throw new Error('Rate limit exceeded, retry after delay');
            }
            
            throw new Error(`OpenRouter API error: ${response.status} - ${error}`);
        }

        const data = await response.json();
        console.log(`üì° OpenRouter: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API`);
        return data.choices[0].message.content;
    }

    parseAIResponse(response, gameState, requestId = 'unknown') {
        try {
            // Try multiple JSON extraction methods
            let jsonStr = null;
            
            // Method 1: Look for JSON block with code markers
            const codeBlockMatch = response.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/i);
            if (codeBlockMatch) {
                jsonStr = codeBlockMatch[1];
                
                // Quick check if JSON looks truncated
                if (!jsonStr.includes('"reasoning"') || !jsonStr.endsWith('}')) {
                    jsonStr = null; // Force try other methods
                }
            } else {
                // Method 2: Find the first complete JSON object
                const jsonMatch = response.match(/\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/);
                if (jsonMatch) {
                    jsonStr = jsonMatch[0];
                } else {
                    // Method 3: Try to find any curly braces content
                    const fallbackMatch = response.match(/\{[\s\S]*\}/);
                    if (fallbackMatch) {
                        jsonStr = fallbackMatch[0];
                    }
                }
            }
            
            if (!jsonStr) {
                throw new Error('No JSON found in response');
            }

            let decision = JSON.parse(jsonStr);
            
            // Check if response was truncated (missing required structure)
            if (!decision.moves || !decision.reasoning) {
                throw new Error('Truncated response: missing required fields (moves, reasoning)');
            }
            
            // Fix common AI mistakes
            if (decision.diplom–∞cy && !decision.diplomacy) {
                // Fix Cyrillic '–∞' instead of Latin 'a' in diplomacy
                decision.diplomacy = decision.diplom–∞cy;
                delete decision.diplom–∞cy;
            }
            
            if (decision.dipl–æ–º–∞—Ç–∏—è && !decision.diplomacy) {
                // Fix Russian word "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è"
                decision.diplomacy = decision.dipl–æ–º–∞—Ç–∏—è;
                delete decision.dipl–æ–º–∞—Ç–∏—è;
            }
            
            // Validate decision structure
            if (!decision.moves || !Array.isArray(decision.moves) || decision.moves.length === 0) {
                throw new Error('Invalid moves in AI response');
            }

            // Validate moves
            decision.moves.forEach(move => {
                if (typeof move.fromX !== 'number' || typeof move.fromY !== 'number' ||
                    typeof move.toX !== 'number' || typeof move.toY !== 'number' ||
                    typeof move.unitCount !== 'number') {
                    throw new Error('Invalid move format');
                }
            });

            // Validate diplomacy if present (now array of up to 2 messages, no isLie needed)
            if (decision.diplomacy && Array.isArray(decision.diplomacy)) {
                // Filter out invalid messages and limit to 2
                decision.diplomacy = decision.diplomacy.filter(msg => 
                    msg && typeof msg.to === 'string' && typeof msg.content === 'string'
                ).slice(0, 2); // Max 2 messages
                
                if (decision.diplomacy.length === 0) {
                    decision.diplomacy = null;
                }
            } else if (decision.diplomacy && typeof decision.diplomacy.to === 'string') {
                // Legacy support: convert single diplomacy object to array
                decision.diplomacy = [decision.diplomacy];
            } else {
                decision.diplomacy = null;
            }

            return decision;
        } catch (error) {
            console.error(`‚ùå Error parsing AI response for ${gameState.playerId}:`, error.message);
            
            // Return fallback decision
            return this.generateRandomDecision(gameState);
        }
    }

    generateRandomDecision(gameState) {
        const { board, playerId } = gameState;
        const moves = [];
        
        // Find player's units
        for (let y = 0; y < 10; y++) {
            for (let x = 0; x < 10; x++) {
                const cell = board[y][x];
                if (cell.visible && cell.units.length > 0) {
                    const playerUnit = cell.units.find(u => u.player === playerId);
                    if (playerUnit && playerUnit.count > 0) {
                        // Try to make a random valid move
                        const directions = [
                            { dx: 0, dy: -1 }, { dx: 1, dy: 0 },
                            { dx: 0, dy: 1 }, { dx: -1, dy: 0 }
                        ];
                        
                        for (const dir of directions) {
                            const newX = x + dir.dx;
                            const newY = y + dir.dy;
                            
                            if (newX >= 0 && newX < 10 && newY >= 0 && newY < 10) {
                                moves.push({
                                    fromX: x,
                                    fromY: y,
                                    toX: newX,
                                    toY: newY,
                                    unitCount: Math.min(1, playerUnit.count)
                                });
                                break;
                            }
                        }
                        
                        if (moves.length > 0) break;
                    }
                }
            }
            if (moves.length > 0) break;
        }
        
        // If no valid moves found, this is a problem
        if (moves.length === 0) {
            console.error('No valid moves found for fallback decision');
            // Return a default move (this shouldn't happen in normal gameplay)
            moves.push({
                fromX: 0, fromY: 0, toX: 1, toY: 0, unitCount: 1
            });
        }
        
        return {
            moves: moves,
            diplomacy: [], // Empty array for no diplomacy
            reasoning: "–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI"
        };
    }

    // Queue system for AI requests to avoid rate limits
    async queueRequest(gameState, gameEngine) {
        // Clear queue if it's a different player to avoid conflicts
        const currentPlayerId = gameState.playerId;
        if (this.requestQueue.length > 0) {
            const queuedPlayerId = this.requestQueue[0].gameState.playerId;
            if (queuedPlayerId !== currentPlayerId) {
                // Reject all pending requests from different player
                this.requestQueue.forEach(request => {
                    request.reject(new Error(`Request cancelled: player switch from ${queuedPlayerId} to ${currentPlayerId}`));
                });
                this.requestQueue = [];
                this.isProcessing = false;
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                this.activeRequestId = null;
            }
        }
        
        return new Promise((resolve, reject) => {
            this.requestQueue.push({
                gameState,
                gameEngine,
                resolve,
                reject
            });
            
            if (!this.isProcessing) {
                this.processQueue();
            }
        });
    }

    async processQueue() {
        if (this.requestQueue.length === 0) {
            this.isProcessing = false;
            return;
        }
        
        this.isProcessing = true;
        const request = this.requestQueue.shift();
        
        try {
            const decision = await this.makeAIDecision(request.gameState, request.gameEngine);
            request.resolve(decision);
        } catch (error) {
            request.reject(error);
        }
        
        // Process next request immediately
        this.processQueue();
    }

    // Test API connection
    async testConnection() {
        if (!this.getApiKey()) {
            throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        try {
            const response = await fetch(`${this.baseUrl}/models`, {
                headers: {
                    'Authorization': `Bearer ${this.getApiKey()}`
                }
            });

            if (!response.ok) {
                throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
            }

            return true;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${error.message}`);
        }
    }

    // Get model status
    async getModelStatus() {
        const modelStatus = {};
        
        for (const [playerId, modelName] of Object.entries(this.models)) {
            try {
                const response = await fetch(`${this.baseUrl}/models/${modelName}`, {
                    headers: {
                        'Authorization': `Bearer ${this.getApiKey()}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    modelStatus[playerId] = {
                        available: true,
                        model: modelName,
                        info: data
                    };
                } else {
                    modelStatus[playerId] = {
                        available: false,
                        model: modelName,
                        error: `HTTP ${response.status}`
                    };
                }
            } catch (error) {
                modelStatus[playerId] = {
                    available: false,
                    model: modelName,
                    error: error.message
                };
            }
        }
        
        return modelStatus;
    }
}